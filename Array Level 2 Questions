1.Mukesh and his friends have set out on a vacation to Coorg. They have booked accommodation in a resort and the resort authorities organize Campfires every night as a part of their daily activities. Mukesh volunteered himself for an activity called the "Adjacent Stick Game" where sticks of different lengths will be placed in a line and Mukesh needs to remove a stick from each adjacent pair of sticks. He then has to form a bigger stick by combining all the remaining sticks.
 
Mukesh needs to know the smallest length of the bigger stick so formed and needs your help to compute the same. Given the number of sticks N and the lengths of each of the sticks, write a program to find the smallest length of the bigger stick that is formed.

Input format :
The first line of input contains an integer N denoting the number of sticks. Assume that the maximum value for N is 50.
Assume that N is always even.
The next line of input contains an N integer denoting the length of each of the sticks.

Output format :
Output the smallest length of the bigger stick that is formed.

Sample test cases :
Input 1 :
4
2 1 3 1
Output 1 :
2
Input 2 :
4
2 5 4 1
Output 2 :
3


***************************************************************************************


import java.util.Scanner;

public  class Main
{
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int[] sticks=new int[limit];
        int[] small_sticks=new int[limit/2];
        for(int row=0;row<limit;row++)
        {
            sticks[row]=in.nextInt();
        }
        int min_length=0;
        for(int row=0,small_row=0;small_row<limit/2;small_row++,row++)
        {
            small_sticks[small_row]=Math.min(sticks[row],sticks[++row]);
            min_length+=small_sticks[small_row];
        }
        System.out.println(min_length);
    }
}

***************************************************************************************

2.The Pan Am 73 flight from Bombay to New York en route to Karachi and Frankfurt was hijacked by a few Palestinian terrorists at the Karachi International Airport. The senior flight purser Neerja Banhot withered her fear and helped evacuate the passengers on board.
Neerja very well knew that she would not be able to evacuate all passengers dodging the hijackers. So she wanted to hand over the responsibility of evacuating the senior citizens(above 60 years of age) and children(below 18 years of age) in the flight to the mid-aged passengers seated in the diagonal
Given n the number of rows of seats and the number of seats in a row and the ages of passengers in each seat can you find the number of mid-aged passengers seated in the diagonal.

Input format :
The first line input consists of an integer n, corresponding to the number of rows of seats and the number of seats in the aircraft.

The next n lines of input consist of n integers that correspond to the ages of passengers

Output format :
The output consists of an integer corresponding to the number of mid-aged passengers seated in the diagonal.

Sample test cases :
Input 1 :
3 
25 17 20
33 26 30
4  7  3
Output 1 :
2
Input 2 :
5
2 30 34 14  18
80 8 36 44  21
20 23 24 25 25
18 18 19 17 28
29 28 10 12 56
Output 2 :
2

*******************************************************************


import java.util.Scanner;

public  class Main
{
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int mid_age=0;
        int[][] passenger_age=new int[limit][limit];
        for(int row=0;row<limit;row++)
        {
            for(int col=0;col<limit;col++)
            {
                passenger_age[row][col]=in.nextInt();
                if(passenger_age[row][col]<60&&passenger_age[row][col]>18&&row==col) mid_age++;
            }
        }
        System.out.println(mid_age);
    }
}

*********************************************************************

3.Nurikabe logical game (sometimes called Islands in the Stream) is a binary determination puzzle. The puzzle is played on a typically rectangular grid of cells, some of which contain numbers. You must decide for each cell if it is white or black (by clicking on them) according to the following rules:
•	All of the black cells must be connected.
•	Each numbered cell must be part of a white island of connected white cells.
•	Each island must have the same number of white cells as the number it contains (including the numbered cell).
•	Two islands may not be connected.
	There cannot be any 2x2 blocks of black cells.

Unnumbered cells start out grey and cycle through white and black when clicked. Initially numbered cells are white in color.

Problem Statement:

Write a program to find the number of white cells in the final configuration of the board, given a valid initial configuration. Below figure is the sample valid initial configuration.

Input format :
The first line of the input is an integer N that gives the number of rows and columns of the grid.

Next N lines will have a valid initial board configuration with N*N cells. Assume that the maximum number in a cell can be 10.

Grey-colored cells are represented by the integer 20 in the matrix representation of the input configuration.

Output format :
The output should display an integer that the number of white cells in the final configuration of the board.

Sample test cases :
Input 1 :
5
20 20 1 20 3
20 20 20 20 20
20 20 20 20 20
20 20 20 20 20
6 20 3 20 20
Output 1 :
13
Input 2 :
4
20 20 1 20 
20 20 20 20 
8 20 20 20 
20 20 20 20 
Output 2 :
9


*****************************************************************


import java.util.Scanner;

public  class Main
{
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int white_cell=0;
        int[][] cell=new int[limit][limit];
        for(int row=0;row<limit;row++)
        {
            for(int col=0;col<limit;col++)
            {
                cell[row][col]=in.nextInt();
                if(cell[row][col]!=20) white_cell+=cell[row][col];
            }
        }
        System.out.println(white_cell);
    }
}

*******************************************************************

4.Find largest and smallest number in an array.
Input format :
Input consists of n+1 integer inputs.
First line of the input describes the array size 'n',
Followed by n number of array elements.

Output format :
Output displays the smallest and largest number in the array.

Sample test cases :
Input 1 :
5
12 4 2 5 22
Output 1 :
smallest value: 2
largest value: 22

**********************************************************


import java.util.Scanner;

public  class Main
{
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int small=0;
        int large=0;
        int[] arr=new int[limit];
        for(int row=0;row<limit;row++)
        {
            arr[row]=in.nextInt();
        }
        small=arr[0];
        large=arr[0];
        for(int row=1;row<limit;row++)
        {
            small=Math.min(small,arr[row]);
            large=Math.max(large,arr[row]);
        }
        System.out.println("smallest value : "+small);
        System.out.println("largest value : "+large);
    }
}

*********************************************************

5.Given an array A consists of N number of elements.If the sum of the element is "even" print the sum of the element.If the sum of the element is "odd" print the product of the element.

Input format :
The first line of input contains the number of elements N

The second line of input represents the elements A1, A2, A3 . . . . . AN

Output format :
Prints the desired result

Sample test cases :
Input 1 :
5 
1 2 3 4 6
Output 1 :
16


********************************************************************************

import java.util.Scanner;

public  class Main
{
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int sum=0;
        int prod=1;
        int[] arr=new int[limit];
        for(int row=0;row<limit;row++)
        {
            arr[row]=in.nextInt();
            sum+=arr[row];
            prod*=arr[row];
        }
        if(sum%2==0) System.out.println(sum);
        else System.out.println(prod);
    }
}

********************************************************************************


6.Given N balls of colour red, white or blue arranged in a line in random order. You have to arrange all the balls such that the balls with the same colours are adjacent with the order of the balls, with the order of the colours being red, white and blue (i.e., all red coloured balls come first then the white coloured balls and then the blue coloured balls).

Input Format
single integer array size N. N number of array values
Constraints
1<=N<=100
Output Format
output array value

Sample Input 0
5
0 1 0 2 1 
Sample Output 0
0 0 1 1 2

*******************************************************************

import java.util.Scanner;

public  class Main
{
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int temp;
        int[] arr=new int[limit];
        for(int row=0;row<limit;row++)
        {
            arr[row]=in.nextInt();
        }
        for(int row=0;row<limit;row++)
        {
            for(int i=0;i<limit-1;i++)
            {
                if(arr[i]>arr[i+1])
                {
                    temp=arr[i+1];
                    arr[i+1]=arr[i];
                    arr[i]=temp;
                }
            }
        }
        for(int row=0;row<limit;row++)
        {
            System.out.print(arr[row]+" ");
        }
    }
}

*******************************************************************

7.Given an array X with n number of elements, return true if the given array X is sorted else return false.
You may consider multiple positions may be shifted in the array X.
Example 1:
Input: X=[1,2,3,4,5]  
Output: true
Example 1:
Input: X=[3,4,5, 1,2,]  
Output: true
Example 1:
Input: X=[3,1,2,4,5]  
Output: false

***********************************************************************


import java.util.Scanner;

public  class Main
{
    static boolean isSorted(int[] arr)
    {
        int limit=arr.length;
        for(int row=0;row<limit-1;row++)
        {
            for(int check_row=row+1;check_row<limit;check_row++)
            {
                if(arr[row]>arr[check_row]) return false;
            }
        }
        return true;
    }
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int[] arr=new int[limit];
        for(int row=0;row<limit;row++)
        {
            arr[row]=in.nextInt();
        }
        System.out.println(isSorted(arr));
    }
}

**********************************************************************

8.Given an Unsorted array with n number elements. Find the smallest missing element from the array.
Example 1:
Input: [1,2,0];
Output: 3
Example 1:
Input: [6,3,4,5];
Output: 1

****************************************************************************


import java.util.Arrays;
import java.util.Scanner;

public  class Main
{
    static int Missing_element(int[] arr)
    {
        Arrays.sort(arr);
        if(arr[0]>1)
            {
                return 1;
            }
        else
        {
        for(int row=0;row<arr.length-1;row++)
        {
            if(arr[row]!=arr[row+1]-1)
            {
                return arr[row]+1;
            }
        }
        }
        return arr[arr.length-1]+1;
    }
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int[] arr=new int[limit];
        for(int row=0;row<limit;row++)
        {
            arr[row]=in.nextInt();
        }
        System.out.println(Missing_element(arr));
    }
}

**********************************************************************

9.Given an array X with n size having digits from 0 to 9. find and display missing digits from the array.

Input1: n=4; x= [1,4,3,8]
output1: 0  2 5  6  7 //missing digits from the array.

*********************************************************************


import java.util.Arrays;
import java.util.Scanner;

public  class Main
{
    static boolean isElement(int[] arr,int target)
    {
        for(int row=0;row<arr.length;row++)
        {
            if(arr[row]==target) return  true;
        }
        return false;
    }
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int[] arr=new int[limit];
        for(int row=0;row<limit;row++)
        {
            arr[row]=in.nextInt();
        }
        for(int val=0;val<10;val++)
        {
            if(!isElement(arr,val))
            {
                System.out.print(val+" ");
            }
        }
    }
}

*************************************************************************

10.Given an array of integers X with n number of elements and an integer, target T, return the indices of the numbers such that the sum of the two numbers is equal to target T. 
 You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return answers in order.
Example 1:
Input: X = [2,7,11,15] , T = 9
Output: [0,1]
Example 2:
Input: X = [3,2,4], T = 6
Output: [1,2]

****************************************************************************


import java.util.Arrays;
import java.util.Scanner;

public  class Main
{
    static int[] sum_indices(int[] arr,int target)
    {
        int[] res=new int[2];
        res[0]=-1;
        res[1]=-1;
        for(int row=0;row<arr.length;row++)
        {
            for(int second_row=row+1;second_row<arr.length;second_row++)
            {
                if(arr[row]+arr[second_row]==target)
                {
                    res[0]=row;
                    res[1]=second_row;
                    break;
                }
            }
        }
        return res;
    }
    public static void main(String[] args)
    {
        Scanner in=new Scanner(System.in);
        int limit=in.nextInt();
        int[] arr=new int[limit];
        for(int row=0;row<limit;row++)
        {
            arr[row]=in.nextInt();
        }
        int target=in.nextInt();
        System.out.println(Arrays.toString(sum_indices(arr,target)));
    }
}

*********************************************************
